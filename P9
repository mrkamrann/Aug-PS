/*
Link : https://codeforces.com/contest/1986/problem/G2
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <numeric>
#include <cassert>


long long ComputeResult(std::vector<long long>& nums) {
  
     int len = nums.size();
  
     if (len <= 0 || len > 500000) {
            throw std::invalid_argument("len out of valid range");
      }
  
      for (int i = 0; i < len; ++i) {
  
            if (nums[i] <= 0 || nums[i] > len) {
                throw std::invalid_argument("nums values out of valid range");
            }
        }

    std::vector<std::vector<int>> divisors(len + 1);
    std::vector<std::vector<int>> q_value(std::min(10LL, static_cast<long long>(len + 1)), std::vector<int>(len + 1));
    std::vector<std::vector<int>> values(len + 1);

    for (std::size_t i = 1; i <= len; ++i) {
        for (std::size_t j = i; j <= len; j += i) {
            divisors[j].push_back(static_cast<int>(i));
        }
    }

    long long answer = 0;
    for (std::size_t i = 0; i < len; ++i) {
        long long value_1 = nums[i] / std::gcd(nums[i], static_cast<long long>(i + 1));
        long long value_2 = (i + 1) / std::gcd(nums[i], static_cast<long long>(i + 1));
        for (int x_val : divisors[value_1]) {
            if (x_val >= 10) {
                for (int y_val : values[x_val]) {
                    answer += y_val == value_2;
                }
            } else {
                answer += q_value[x_val][value_2];
            }
        }
        for (int x_val : divisors[value_1]) {
            if (value_2 >= 10) {
                values[value_2].push_back(x_val);
            } else {
                q_value[value_2][x_val]++;
            }
        }
    }
    return answer;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <numeric>
#include <cassert>

int main() {

    int test_cases;
    std::cin >> test_cases;
    while (test_cases--) {
        int len;
        std::cin >> len;
        std::vector<long long> nums(len);
        for (int i = 0; i < len; ++i) {
            std::cin >> nums[i];
        }

        std::cout << ComputeResult(nums) << std::endl;
    }
    return 0;
}
