/*
Link : https://codeforces.com/contest/1285/problem/F



Julie has an vector named `elements`, consisting of `num_elements` integers. She wants to find the maximum value of the least common multiple (LCM) of any two elements in the array. The LCM of two integers is the smallest positive integer that is divisible by both integers. For example, LCM(6,8)=24, LCM(4,12)=12, and LCM(2,3)=6.


Create a C++ Function `MaxLCM` that will return an integer denoting the maximum value of the least common multiple of two elements in the array.

Use appropriate error handling using the `stdexcept` library for invalid test cases.

Input Type
- A vector of integers named `elements`.
- An integer named `num_elements`.

Input Constraints
- The number of elements, `num_elements`, should be between 2 and 100,000 inclusive.
- Each element in `elements` should be between 1 and 100,000 inclusive.


*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>
#include <numeric>

long long ComputeLcm(long long a_val, long long b_val) {
    return a_val * b_val / std::gcd(a_val, b_val);
}

long long MaxLCM(std::vector<long long>& vec) {
  
    if (vec.size() < 2 || vec.size() > 100000) {
        throw std::invalid_argument("Invalid vec size");
    }

    for (const long long& element : vec) {
        if (element < 1 || element > 100000) {
            throw std::invalid_argument("Invalid vec element");
        }
    }
    std::sort(vec.begin(), vec.end()); 
  
    long long vec_size = vec.size();
    long long max_1 = vec[vec_size - 1];
    long long max_2 = vec[vec_size - 2];
    long long max_3 = 1;
    long long max_4 = 1;
    long long result = 0;

    if (vec_size > 2) max_3 = vec[vec_size - 3];

    for (long long i = 0; i < vec_size; i++) {
        long long temp = vec[i];
        if (temp % 2 != max_1 % 2) max_4 = std::max(max_4, temp);
    }

    for (long long i = 0; i < vec_size; i++) {
        result = std::max(result, ComputeLcm(max_1, vec[i]));
        result = std::max(result, ComputeLcm(max_2, vec[i]));
        result = std::max(result, ComputeLcm(max_3, vec[i]));
        result = std::max(result, ComputeLcm(max_4, vec[i]));
    }

    return result;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>
#include <numeric>

int main() {
  //TEST
std::vector<long long> vec_1 = {1, 2, 3};
long long expected_1 = 6;
long long result_1 = MaxLCM(vec_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<long long> vec_2 = {4, 5, 6, 7, 8};
long long expected_2 = 56;
long long result_2 = MaxLCM(vec_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<long long> vec_3 = {100000, 99999};
long long expected_3 = 9999900000;
long long result_3 = MaxLCM(vec_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<long long> vec_4 = {1, 2};
long long expected_4 = 2;
long long result_4 = MaxLCM(vec_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<long long> vec_5 = {99999, 100000};
long long expected_5 = 9999900000;
long long result_5 = MaxLCM(vec_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<long long> vec_6 = {50000, 25000, 12500};
long long expected_6 = 50000;
long long result_6 = MaxLCM(vec_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<long long> vec_7 = {100, 200, 300, 400, 500};
long long expected_7 = 2000;
long long result_7 = MaxLCM(vec_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<long long> vec_8 = {1, 3, 5, 7, 9};
long long expected_8 = 63;
long long result_8 = MaxLCM(vec_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<long long> vec_9 = {2, 3, 5, 7, 11};
long long expected_9 = 77;
long long result_9 = MaxLCM(vec_9);
assert(result_9 == expected_9);
//TEST_END
//TEST
std::vector<long long> vec_10 = {0, 2, 3};
try {
    MaxLCM(vec_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_11 = {1, -2, 3};
try {
    MaxLCM(vec_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_12 = {1, 2, 100001};
try {
    MaxLCM(vec_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_13 = {};
try {
    MaxLCM(vec_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_14 = {1};
try {
    MaxLCM(vec_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_15(100001, 1); 
try {
    MaxLCM(vec_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_16 = {-1, 2, 3};
try {
    MaxLCM(vec_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_17 = {1, 2, -3};
try {
    MaxLCM(vec_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_18 = {0, 1, 2};
try {
    MaxLCM(vec_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> vec_19 = {-1, -2, -3};
try {
    MaxLCM(vec_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END



    return 0;
}
